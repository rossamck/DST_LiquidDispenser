name: Electron Build and Package

on:
  push:
    paths:
      - 'package.json'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macOS-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 18.15.0
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Electron app
        run: npm run build

      - name: Package Electron app
        run: npm run dist
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist/

      - name: Get version
        id: pkg
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ steps.pkg.outputs.version }}
          release_name: Release v${{ steps.pkg.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/github-script@v4
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const upload_url = "${{ steps.create_release.outputs.upload_url }}";
            const version = "${{ steps.pkg.outputs.version }}";
            const files = [
              `dist/LiquidDispenser-${version}-linux-x86_64.AppImage`,
              `dist/LiquidDispenser-${version}-mac-x64.dmg`,
              `dist/LiquidDispenser-${version}-mac-x64.dmg.blockmap`,
              `dist/LiquidDispenser-${version}-win-x64.exe`,
              `dist/LiquidDispenser-${version}-win-x64.exe.blockmap`,
              `dist/latest.yml`,
              `dist/latest-linux.yml`,
              `dist/latest-mac.yml`,
            ];

            for (const file of files) {
              const filePath = path.join(process.env.GITHUB_WORKSPACE, file);
              if (fs.existsSync(filePath)) {
                await github.repos.uploadReleaseAsset({
                  url: upload_url,
                  headers: {
                    'content-type': 'application/octet-stream',
                    'content-length': fs.statSync(filePath).size,
                  },
                  name: path.basename(file),
                  file: fs.createReadStream(filePath),
                });
              }
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
